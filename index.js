//git 프로젝트

//git은 무엇인가?

// 1. 현상관리도구 중 하나
//    현상관리도구 >> 버전관리 시스템
//    작업을 진행하면서 리스트를 관리할수 있다.

// 2. git의 장점
//    협업하는 단계에서 소스코드를 파일로 주고 받을 필요없이 같은 파일을 팀원들과 동시에 병렬로 작업이 가능하다.
//    A가 작업을 하고 -> B에게 작업을 넘겨주는데
//    A랑 B가 메인페이지를 같이 작업을 하고 있는데
//    A는 상품 페이지 , B는 장바구니 페이지
//    파일로 넘겨주고 어디가 다른지 눈으로 보고 이렇게
//    작업을 하면 시간도 오래걸리고 버그도 잡기 힘들다.

//    서버에 서로 푸쉬를 하면 서버에 있는 파일이 자동으로 갱신된다.
//    A랑 B랑 작업을 하는데
//    C라는 새로운 팀원은 git이라는 저장소에서 클론으로 파일을 내려받아서 바로 작업이 가능하다.

// git init
// 새로운 git 저장소를 생성할 때 사용하는 git 명령어

//git 저장소를 생성한 폴더에서
//숨김파일 보기를 체크하면 .git 생성

// git add README.md >> git add 커밋을 추가하는데 git저장소에 추가하려고 대기

// git commit -m "first commit" >> 커밋 메세지를 작성할수 있다.
// 저장소에 추가하면서 메세지는 first commit이 보인다.

// git branch -M(master) main >> 마스터 브런치를 설정한다
// git branch -M main 이렇게 하면 main이라는 마스터 브런치 설정

// git remote add origin >> 깃 저장소 링크를 추가하낟.
// origin : 복제한 원격 git 저장소의 기본 이름
// git remote : origin 복제한 url을 참조하기 위해 호출
// git remote add origin https://github.com/kim-seung-hun/220621.git (자신의 git 저장소 주소)를 추가해준다.

// git 저장소가 초기화 된 경로인지 확인 잘하고 사용
// 초기화 경로는 git init을 한 경로
// Is : 경로에 있는 파일 구조를 볼수 있다.
// cd "들어갈 폴더" : 경로 변경하는데
// cd .. : 경로가 한단계 위로 올라간다

// git push -u origin main 깃 저장소에 첫 커밋을 푸쉬

// 소스제어 탭을 선택시 git 그래프에 변경 사항 중
// U : 저장소에 없는 새로운 파일
// M : 저장소에 파일은 있고 내용이 변경됐을 떄
// D : 저장소에 있는 파일이 제거됐을 때

//////////////////////////////////////////////////////////
// 사용자 설정
// 깃을 사용할때 사용하는 것의 사용자 세팅
// git config --global user.name "자기 닉네임"
// git config --global user.email "자기 이메일"

// 설정 정보 조회
// 설정이 제대로 되었는지 확인
// git config --global --list

// git 저장소 초기화 저장소 생성
// git의 저장소로 지정할 경로로 이동해서
// git init

// git 저장소 복제 (파일 내려받기)
// git clone (url)

// git 저장소 추가
// git remote add origin "git 저장소 url"

// git 사용
// 스테이징에 추가
// git add 파일명(확장자 까지)

// 커밋 메세지
// git commit -m "작업내용"

// 현재 브런치 명령
// git switch "브런치 이름"

// 브런치 목록 정보 보기
// git branch -r

// 로컬 깃 브런치 목록 정보 보기
// git branch -a

// 브런치 추가
// git branch "추가하고 싶은 브런치 이름"

// 브런치 제거
// git branch -d "제거할 브런치 이름"

// 리드미 작성
// 1. 글씨의크기
// #을 입력하고 뒤에 글씨 작성
// #은 5개까지 입력 가능
// #의 개수가 많을수록 글씨 크기는 작아진다

// 2. 코드 사용
// ```사용하는 언어 (백틱 3개)로 시작하는데 뒤에 사용할 언어를 붙여준다.
// (코드내용 작성)
// ```(백틱 3개)로 닫아준다.

// 3. 링크 사용
// [링크의 이름] 표시될 링크의 문자
// (url) 링크로 접속할 주소

// 4. 목록추가
// * 로 목록 표현

// 5. 테이블 추가
// | , --- 이거로 구분할 수 있다.
// 형태는
// 1 | 2 | 3
// ---|---|---|
// 제목 | 이름 | 날짜

// 6. 이미지추가
// 이슈 탭에 가서 새로운 이슈 생성
// 쓰기창에 이미지를 드래그해서 넣으면
// ![farm](https://user-images.githubusercontent.com/107898063/174936984-05eec817-e976-425b-a248-a80d2a56a4e6.png)
// 이렇게 뜨는데 그대로 복사해서 붙여넣으면 된다........

///fdsosegsefsdfdsafksjaf;lelskfjs
